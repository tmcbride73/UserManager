@page "/UserList"
@using UserManager.Application.Services
@using UserManager.Domain
@inject UserService UserService

<h3>User List</h3>

<TelerikButton OnClick="@(() => { CreateVisible = true; })">Create A User</TelerikButton>

<hr />

<TelerikGrid Data="@Users" Height="1020px"
             Pageable="true" Sortable="true" Groupable="true"
             FilterMode="Telerik.Blazor.GridFilterMode.FilterRow"
             Resizable="true" Reorderable="true" PageSize=16>
    <GridColumns>
        <GridColumn Field="@(nameof(User.SeqNum))" Title="" Width="200x">
            <Template>
                <TelerikButton Icon="eye" OnClick="(x => ViewUserClicked((context as User).SeqNum))">View</TelerikButton>
                <TelerikButton Icon="edit" OnClick="(x => EditUserClicked((context as User).SeqNum))">Edit</TelerikButton>
            </Template>
        </GridColumn>
        <GridColumn Field="@(nameof(User.SeqNum))" Title="SeqNum" Width="200px" />
        <GridColumn Field="@(nameof(User.UserName))" Title="UserID" />
        <GridColumn Field="@(nameof(User.FirstName))" Title="First Name" />
        <GridColumn Field="@(nameof(User.LastName))" Title="Last Name" />
        <GridColumn Field="@(nameof(User.Activity))" Title="Activity" />
    </GridColumns>
</TelerikGrid>

<TelerikDialog @bind-Visible="@ViewVisible"
               Width="400px"
               Title="@(SelectedUser.FirstName + " " + SelectedUser.LastName + " - " + SelectedUser.SeqNum.ToString())">
    <DialogContent>
        <label>SeqNum:</label>@SelectedUser.SeqNum
        <br />
        <label>UserID:</label>@SelectedUser.UserName
        <br />
        <label>First Name:</label>@SelectedUser.FirstName
        <br />
        <label>Last Name:</label>@SelectedUser.LastName
        <br />
        <label>Activity:</label>@SelectedUser.Activity
        <br />
    </DialogContent>
    <DialogButtons>
        <TelerikButton OnClick="@(() => { EditVisible = true; ViewVisible = false; })">Edit</TelerikButton>
        <TelerikButton OnClick="@(() => { ViewVisible = false; })">Cancel</TelerikButton>
    </DialogButtons>
</TelerikDialog>

<TelerikDialog @bind-Visible="@EditVisible"
               Width="400px"
               Title="@("Editing: " + SelectedUser.FirstName + " " + SelectedUser.LastName + " - " + SelectedUser.SeqNum.ToString())">
    <DialogContent>
        <label>SeqNum:</label>@SelectedUser.SeqNum
        <br />
        <label>UserID:</label><TelerikTextBox @bind-Value="@SelectedUser.UserName"></TelerikTextBox>
        <br />
        <label>First Name:</label><TelerikTextBox @bind-Value="@SelectedUser.FirstName"></TelerikTextBox>
        <br />
        <label>Last Name:</label><TelerikTextBox @bind-Value="@SelectedUser.LastName"></TelerikTextBox>
        <br />
        <label>Activity:</label><TelerikTextBox @bind-Value="@SelectedUser.Activity"></TelerikTextBox>
        <br />
    </DialogContent>
    <DialogButtons>
        <TelerikButton OnClick="@(() => { UpdateUser(SelectedUser.SeqNum); })">Update</TelerikButton>
        <TelerikButton OnClick="@(() => { EditVisible = false; })">Cancel</TelerikButton>
    </DialogButtons>
</TelerikDialog>

<TelerikDialog @bind-Visible="@CreateVisible"
               Width="400px"
               Title="Create A New User">
    <DialogContent>
        <label>UserID:</label><TelerikTextBox @bind-Value="@NewUser.UserName"></TelerikTextBox>
        <br />
        <label>First Name:</label><TelerikTextBox @bind-Value="@NewUser.FirstName"></TelerikTextBox>
        <br />
        <label>Last Name:</label><TelerikTextBox @bind-Value="@NewUser.LastName"></TelerikTextBox>
        <br />
        <label>Activity:</label><TelerikTextBox @bind-Value="@NewUser.Activity"></TelerikTextBox>
        <br />
    </DialogContent>
    <DialogButtons>
        <TelerikButton OnClick="@(() => { CreateUser(); })">Save</TelerikButton>
        <TelerikButton OnClick="@(() => { CreateVisible = false; })">Cancel</TelerikButton>
    </DialogButtons>
</TelerikDialog>

<TelerikNotification @ref="NotificationComponent"></TelerikNotification>

@code {

    TelerikNotification NotificationComponent { get; set; }

    public List<User> Users { get; set; }
    public User SelectedUser { get; set; } = new User();
    public User NewUser { get; set; } = new User();

    public bool CreateVisible { get; set; } = false;
    public bool ViewVisible { get; set; } = false;
    public bool EditVisible { get; set; } = false;

    protected override async Task OnInitializedAsync() {
        Users = (await UserService.GetAllUsers()).ToList();
    }

    public async void ViewUserClicked(long? seqNum)
    {
        SelectedUser = await UserService.GetUser(new UserFilter { SeqNum = seqNum });
        ViewVisible = true;
        StateHasChanged();
    }

    public async void EditUserClicked(long? seqNum)
    {
        SelectedUser = await UserService.GetUser(new UserFilter { SeqNum = seqNum });
        EditVisible = true;
        StateHasChanged();
    }

    public async void UpdateUser(long? seqNum)
    {
        try
        {
            await UserService.UpdateUser(SelectedUser);
            EditVisible = false;
            StateHasChanged();
            Users = (await UserService.GetAllUsers()).ToList();
            StateHasChanged();

            NotificationComponent.Show(new NotificationModel()
            {
                Text = "User Update Successful",
                ThemeColor = "success",
                ShowIcon = true,
                Icon = "success"
            });
        }
        catch(Exception ex)
        {
            NotificationComponent.Show(new NotificationModel()
            {
                Text = $"User Update Failed: {ex.Message.ToString()}",
                ThemeColor = "error",
                ShowIcon = true,
                Icon = "error"
            });
        }
    }

    public async void CreateUser()
    {
        try
        {
            await UserService.AddUser(NewUser);
            CreateVisible = false;
            StateHasChanged();
            Users = (await UserService.GetAllUsers()).ToList();
            StateHasChanged();

            NotificationComponent.Show(new NotificationModel()
            {
                Text = "User Creation Successful",
                ThemeColor = "success",
                ShowIcon = true,
                Icon = "success"
            });
            NewUser = new User();
        }
        catch(Exception ex)
        {
            NotificationComponent.Show(new NotificationModel()
            {
                Text = $"User Creation Failed: {ex.Message.ToString()}",
                ThemeColor = "error",
                ShowIcon = true,
                Icon = "error"
            });
            NewUser = new User();
        }
        
    }

}
