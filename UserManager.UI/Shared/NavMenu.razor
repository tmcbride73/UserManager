@inject NavigationManager NavigationManager

<div class="top-row navbar navbar-dark">
    <TelerikMenu Data="@MenuItems">
        <ItemTemplate Context="item">
            @{
                var inlineStyle = SelectedItem.Text != item.Text ? "font-weight: normal;" : "font-weight: bold;";
            }

            @if (item.IsTitle)
            {
                <span onclick="@(() => GoToUrl(item.Url))" class="navbar-title" style="@inlineStyle">@item.Text</span>
            }
            else
            {
                <span onclick="@(() => GoToUrl(item.Url))" class="navbar-item" style="@inlineStyle"><span class="mr-2 k-icon @(item.Icon)"></span>@item.Text</span>
            }
        </ItemTemplate>
    </TelerikMenu>
</div>


@code {
    public List<MenuItem> MenuItems { get; set; }

    public MenuItem SelectedItem { get; set; } = new MenuItem()
        {
            IsTitle = true,
            Url = "",
            Text = "User Manager"
        };

    public class MenuItem
    {
        public bool IsTitle { get; set; }
        public string Url { get; set; }
        public string Text { get; set; }
        public string Icon { get; set; }
    }
    protected override void OnInitialized()
    {
        MenuItems = new List<MenuItem>()
        {
            new MenuItem()
            {
                IsTitle = true,
                Url = "",
                Text = "User Manager"
            },
            new MenuItem()
            {
                Url = "UserList",
                Text = "User List",
                Icon = "k-i-layout"
            },
            new MenuItem()
            {
                Url = "https://Google.com",
                Text = "EBS",
                Icon = "k-i-search"
            }
        };

        base.OnInitialized();
    }

    private void GoToUrl(string url, bool isExternal = false)
    {
        SelectedItem = MenuItems.Where(x => x.Url == url).First();
        NavigationManager.NavigateTo(url);

    }
}